package ch.aoz.maps;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Map;

/**
 * TODO: Insert description here. (generated by tobulogic)
 */
public class Subscriber implements java.io.Serializable {
  public static final String entityKind = "Subscriber";
  private static final long serialVersionUID = 161724L;
  
  private final String email;
  public static final String emailProperty = "email";

  /** This field is optional and may be left blank. */
  private final String name;
  public static final String nameProperty = "name";

  private String language;
  public static final String languageProperty = "language";

  private final String hash;
  public static final String hashProperty = "hash";

  private final boolean ok;
  
  public Subscriber(String email, String name, String language) {
    this(email, name, language, null);
  }

  public Subscriber(String email, String name, String language, String hash) {
    this.email = email;
    if (name == null) {
      this.name = "";
    } else {
      this.name = name;
    }
    this.language = language;
    if (hash == null) {
      this.hash = constructHash();
    } else {
      this.hash = hash;
    }
    this.ok = (email != null && this.hash != null && language != null);
  }
    
  private String constructHash() {
	  // The hash consists of sha1(email + language + 128-bit random nonce)
	  MessageDigest sha1;
	  try {
	    sha1 = MessageDigest.getInstance("SHA");
	  } catch (NoSuchAlgorithmException e) {
	    return null;	// Signals to the caller that things are not all right
	  }
	  SecureRandom random = new SecureRandom();
	  
	  byte randomNonce[] = new byte[16];
	  random.nextBytes(randomNonce);
	  
	  String string_to_hash = this.email + this.language + new String(randomNonce); 
	  sha1.update(string_to_hash.getBytes());
	  // Convert the resulting digest byte array to a string. Yes, the following solution
	  // is ridiculously slow, but it's short & readable, and perf doesn't matter here.
	  StringBuilder sb = new StringBuilder();
	  for(byte int8 : sha1.digest())
	      sb.append(String.format("%02x", int8 & 0xff));
	  return sb.toString();
  }
  
  public static Map<String, Subscriber> getAllSubscribers() {
    Subscribers subscribers = Subscribers.getSubscribers();
    if (subscribers == null)
      return null;
    return subscribers.getSortedSubscribers();
  }
  
  public static Subscriber getSubscriberByHash(String hash) {
    Subscribers subscribers = Subscribers.getSubscribers();
    if (subscribers == null)
      return null;
    return subscribers.getSubscriberByHash(hash);
  }
  
  public static boolean DeleteSubscriber(Subscriber s) {
    return Subscribers.removeSubscriber(s.getEmail());
  }
  
  public static boolean AddSubscriber(Subscriber s) {
    return Subscribers.addSubscriber(s);
  }
  
  public static boolean exists(String email) {
    return Subscribers.exists(email);
  }

  public static Subscriber GetByEmail(String email) {
    Subscribers subscribers = Subscribers.getSubscribers();
    if (subscribers == null)
      return null;
    return subscribers.getSubscriber(email);
  }
  
  /**
   * @return the email
   */
  public String getEmail() {
    return email;
  }

  /**
   * @return the name
   */
  public String getName() {
    return name;
  }

  /**
   * @return the name
   */
  public String getHash() {
    return hash;
  }

  /**
   * @return the languages
   */
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }
  
  /**
   * @return the ok
   */
  public boolean isOk() {
    return ok;
  }
}
